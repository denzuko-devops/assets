---
# https://blog.alexellis.io/docker-stacks-attachable-networks/
version: "3.6"

networks:
  traefik-net:
    external: true

#TODO:
# telegraf(docker) -> influxdb && grafana
# logstash(syslog) -> escluster
# docker security scanner
# sysdig
# registry && registry ui
# powerdns && https://github.com/ngoduykhanh/PowerDNS-Admin
# cicd!?

services:

  traefik:
    image: containous/traefik:experimental
    ports:
      - "80:80/tcp"
      - "8080:8080/tcp"
      - "443:443/tcp"
    networks:
      - default
      - traefik-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # secrets:
    #    - ssl.key
    #    - ssl.crt
    command:
      - --accesslogsfile=/dev/stdout
      - --web
      - --docker
      - --docker.swarmmode
      - --docker.domain="dapla.net"
      - --docker.watch
      # - --entrypoints="Name:http Address::80 Redirecct.EntryPoint:https"
      # - --entrypoints="Name:http Address::443 TLS:/ssl/ssl.crt,/ssl/ssl.key"
      # - --defaultentrypoints="http,https"
      - --defaultentrypoints="http"
      - --logLevel=debug
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 3
        window: 90s
      mode: global
      placement:
        constraints: [node.role == manager]

  portainer:
    image: portainer/portainer:latest
    networks:
      - default
      - traefik-net
    labels:
      - traefik.tags=web
      - traefik.frontend.rule=Host:dashboard.dapla.net
      - traefik.backend=portainer
      - traefik.port=9000
      - traefik.docker.network=traefik-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "-H"
      - "unix:///var/run/docker.sock"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 3
        window: 90s
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.tags=web
        - traefik.frontend.rule=Host:dashboard.dapla.net
        - traefik.backend=portainer
        - traefik.port=9000
        - traefik.docker.network=traefik-net
        - traefik.backend.loadbalencer.method=drr

  viz:
    image: dockersamples/visualizer:latest
    networks:
      - default
      - traefik-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.frontend.rule=Host:status.dapla.net
      - traefik.backend=viz
      - traefik.port=8080
      - traefik.docker.network=traefik-net
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 3
        window: 90s
      mode: replicated
      replicas: 1
      labels:
        - traefik.tags=web
        - traefik.port=8080
        - traefik.frontend.rule=Host:status.dapla.net
        - traefik.backend=viz
        - traefik.docker.network=traefik-net
        
          shepherd:
    image: 'mazzolino/shepherd'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # /root/.docker/config.json:/root/.docker/config.json:ro
    environment:
      SLEEP_TIME: "5m"
      BLACKLIST_SERVICES: "shepherd autoscale traefik agent"
      WITH_REGISTRY_AUTH: "true"
      DOCKER_HOST: "unix:///var/run/docker.sock"
    deploy:
      restart_policy:
        condition: on-failure
      mode: global
      placement:
        constraints: [node.role == manager]
      labels:
        traefik.enable: "false"
        orbiter: "false"

  autoscale:
    image: gianarb/orbiter:latest
    #command: ["daemon", "--debug"]
    environment:
      DOCKER_HOST: "unix:///var/run/docker.sock"
    ports:
      - 8000
    networks:
      - public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      restart_policy:
        condition: on-failure
      mode: replicated
      replicas: 1
      labels:
        com.centurylinklabs.watchtower.enable: "true"
        orbiter: "false"
        traefik.enable: "true"
        traefik.port: "8000"
        traefik.docker.network: "public"
        traefik.frontend.rule: "Host:scaler.dapla.net"
        traefik.frontend.priority: "10"
        traefik.frontend.entryPoints: "http, https"
      placement:
        constraints: [node.role == manager]

  agent:
    image: portainer/agent:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - target: 9001
        published: 9001
        protocol: tcp
        mode: host
    environment:
      AGENT_CLUSTER_ADDR: tasks.agent
    networks:
      - internal
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
      labels:
        orbiter: "false"
        traefik.enable: "false"

  whoami:
    image: emilevauge/whoami:latest
    networks:
      - default
      - traefik-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 3
        window: 90s
      mode: replicated
      replicas: 4
      placement:
        constraints: [node.role == worker]
      labels:
        - traefik.enabled=true
        - traefik.tags=web
        - traefik.port=80
        - traefik.docker.network=traefik-net
        - traefik.frontend.rule=Host:whoami.dapla.net
        - traefik.backend=whoami
        - traefik.backend.loadbalencer.method=drr
        - traefik.frontend.priority: 10

# vim: set ts=2 sts=2 sw=2 et si ai:
